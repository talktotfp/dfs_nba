# -*- coding: utf-8 -*-
"""
  _   _ ____             _____                      _                _____                                
 | \ | |  _ \   /\      / ____|                    | |              / ____|                               
 |  \| | |_) | /  \    | |  __  __ _ _ __ ___   ___| | ___   __ _  | (___   ___ _ __ __ _ _ __   ___ _ __ 
 | . ` |  _ < / /\ \   | | |_ |/ _` | '_ ` _ \ / _ \ |/ _ \ / _` |  \___ \ / __| '__/ _` | '_ \ / _ \ '__|
 | |\  | |_) / ____ \  | |__| | (_| | | | | | |  __/ | (_) | (_| |  ____) | (__| | | (_| | |_) |  __/ |   
 |_| \_|____/_/    \_\  \_____|\__,_|_| |_| |_|\___|_|\___/ \__, | |_____/ \___|_|  \__,_| .__/ \___|_|   
                                                             __/ |                       | |              
                                                            |___/                        |_|  
"""

import pandas as pd
import cx_Oracle
from secure_scraper_setup import oracleCreator, alchemyCreator, isNumber, table_scrape, dateDiff

#load database connections from secure file
engine = alchemyCreator()
oracle_con = oracleCreator()
oracle_cur = oracle_con.cursor()

#get max date from gamelog dataset
oracle_query = """select EXTRACT(YEAR from MAX(GAME_DATE)+1) as YEARID,
EXTRACT(MONTH from MAX(GAME_DATE)+1) as MONTHID ,
EXTRACT(DAY from MAX(GAME_DATE)+1) as DAYID 
from NBA_GAMELOG""" #only select 2010 or later
df_date = pd.read_sql_query(oracle_query,oracle_con) #build dataframe from query;

#close cursor and connection
oracle_cur.close()
oracle_con.close()

#define HTML attributes for scraping
tableHead = 'thead'
tableHeadRow = 'tr'
tableHeadCell = 'th'
tableBody = 'tbody'
tableBodyRow = 'tr'
tableBodyCell = 'td'

#loop through URL's generated by dateDiff using max date query results as inputs
for url in dateDiff(df_date.iloc[0]['MONTHID'],df_date.iloc[0]['DAYID'],df_date.iloc[0]['YEARID']):
    #open a new oracle connection/cursor each loop to avoid timeouts
    ip = 'www.tylerpauley.com'
    port = 1521
    SID = 'xe'
    dsn_tns = cx_Oracle.makedsn(ip, port, SID)
    oracle_con = cx_Oracle.connect('dfs', 'rp4490', dsn_tns)
    oracle_cur = oracle_con.cursor()
    #scrape the page
    try:
        header = table_scrape('header',url,tableHead,tableHeadRow,tableHeadCell,tableBody,tableBodyRow,tableBodyCell)
        body = table_scrape('body',url,tableHead,tableHeadRow,tableHeadCell,tableBody,tableBodyRow,tableBodyCell)
        
        for i,iBody in enumerate(body):
            if  isNumber(iBody[0]):
                for x, iCell in enumerate(iBody):
                    if iCell is None:
                        body[i][x] = float(0)
                    else:
                        if isNumber(iCell):
                            body[i][x] = float(iCell)
            else:
                    body.remove(iBody)
        df = pd.DataFrame(data = body, columns = header)
        df = df.rename(columns={"Date": "GAME_DATE", "FG%": "FGP", "3P": "TP", "3PA": "TPA", "3P%": "TPP", "+/-": "PM", "FT%": "FTP"}) #get rid of weird characters in column names            
        df = df.fillna(0.0) #fill any blank stats with 0   
        df['MP'] = df['MP'].apply(lambda x: round((float((str(x)+":0").split(":")[0]) + float((str(x)+":0").split(":")[1])/100*1.667),2)) #convert minutes played to number
        df = df.apply(lambda x: x.replace(u'\xa0', u' ')) #replace odd ascii characters to prevent Oracle errors
        #convert number fields to floats (from string objects)
        for col in ['FG','FGA','FGP','TP','TPA','TPP','FT','FTA','FTP','ORB','DRB','TRB','AST','STL','BLK','TOV','PF','PTS','GmSc','MP']:
            df[col] = df[col].apply(lambda x: float(x))

        #extract date from URL
        df['GAME_DATE'] = url.replace('https://www.basketball-reference.com/friv/dailyleaders.fcgi?month=','').replace('&day=','/').replace('&year=','/')    

        #remove unneeded columns           
        df = df[['Rk','Player','Tm','Opp','FG','FGA','FGP','TP','TPA','TPP','FT','FTA','FTP','ORB','DRB','TRB','AST','STL','BLK','TOV','PF','PTS','GmSc','MP','GAME_DATE']]
        df = df.applymap(str) #change everything to a string to load into buffer tables smoothly
        
        #prepare datatype for SQL insertion 
        dtyp = {c:types.VARCHAR(df[c].str.len().max())
                for c in df.columns[df.dtypes == 'object'].tolist()}
                
        #perform SQL insertion
        try: 
            date = url.replace('https://www.basketball-reference.com/friv/dailyleaders.fcgi?month=','').replace('&day=','/').replace('&year=','/')
            df.to_sql('nba_buffer_gamelog', engine, index=False, if_exists='append',dtype = dtyp, chunksize = 100)
            print('-Imported date: ' + date)
        except BaseException as e:
            print('-Failed to write to Oracle: '+ str(e))
        oracle_cur.close()
        oracle_con.close()
    except BaseException as e:
        fail_date = url.replace('https://www.basketball-reference.com/friv/dailyleaders.fcgi?month=','').replace('&day=','/').replace('&year=','/')
        print('-Fail on date ' + fail_date + ': '+ str(e))
        
#open final Oracle connection to perform buffer procedure        
oracle_con = cx_Oracle.connect('dfs', 'rp4490', dsn_tns)
oracle_cur = oracle_con.cursor()
try:
    oracle_cur.execute('BEGIN NBA_PARSE_BUFFER_GAMELOG(); END;')
    print('-Buffer table parsed and added to gamelog')
except BaseException as e:
    print('Buffer procedure failed')
    print(str(e))
oracle_cur.close()
oracle_con.close()
                

        
        
